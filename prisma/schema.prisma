generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                         String        @id @default(auto()) @map("_id") @db.ObjectId
  fullName                   String
  email                      String        @unique
  password                   String?
  status                     UserStatus    @default(PENDING)
  isVerified                 Boolean       @default(false)
  isProfileComplete          Boolean       @default(false)
  address                    String?
  isLoggedIn                 Boolean       @default(false)
  image                      String?
  phoneNumber                String?
  dateOfBirth                String?
  gender                     String?
  plateForm                  PlatFormType?
  fcmToken                   String?
  fcmTokenEx                 String?
  stripeCustomerId           String?
  isVerifiedForPasswordReset Boolean       @default(false)
  createdAt                  DateTime      @default(now())
  updatedAt                  DateTime      @updatedAt

  // Relationships
  roles            UserRole[]
  review           Review[]
  faq              Faq[]
  termAndCondition TermAndCondition[]
  privacyPolicy    PrivacyPolicy[]
  notification     Notification[]
  payment          Payment[]
  category         Category[]
  aboutUs          AboutUs[]
  helpAndSupport   HelpAndSupport[]
  Reply            Reply[]
  cart             Cart[]
  checkout         Checkout[]
  admin            Admin?
  sellerProfile    SellerProfile?
  carBrand         CarBrand[]
  favoriteProduct  FavoriteProduct[]
  foundingTeam     FoundingTeam[]
  order            Order[]
  shippingAddress  Address[]
  contactUsInfo    ContactUsInfo[]

  @@map("users")
}

model Role {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  name      UserRoleEnum @unique
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  // Relationships
  users UserRole[]

  @@map("roles")
}

model UserRole {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  roleId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  role Role @relation(fields: [roleId], references: [id])

  @@unique([userId, roleId])
  @@map("user_roles")
}

model Admin {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  userId       String       @unique @db.ObjectId
  role         UserRoleEnum @default(SUPER_ADMIN)
  isSuperAdmin Boolean      @default(false)
  systemOwner  Boolean      @default(false)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  // Relationships
  user User @relation(fields: [userId], references: [id])

  @@map("admins")
}

model SellerProfile {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  userId               String   @unique @db.ObjectId
  companyName          String?
  companyEmail         String?
  logo                 String?
  contactInfo          String?
  address              String?
  payoutInfo           String?
  isSellerInfoComplete Boolean  @default(false)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relations
  user    User      @relation(fields: [userId], references: [id])
  product Product[]

  @@map("seller_profiles")
}

model Category {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  name      String   @unique
  iconUrl   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user    User      @relation(fields: [userId], references: [id])
  product Product[]
  // carProductMapping CarProductMapping[]

  @@map("categories")
}

// model CarProductMapping {
//   id         String   @id @default(auto()) @map("_id") @db.ObjectId
//   carId      String   @db.ObjectId
//   productId  String   @db.ObjectId
//   categoryId String?  @db.ObjectId
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt

//   // Relations
//   car      Car       @relation(fields: [carId], references: [id], onDelete: Cascade)
//   product  Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
//   category Category? @relation(fields: [categoryId], references: [id])

//   @@map("car_product_mappings")
// }

model CarBrand {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  userId           String             @db.ObjectId
  brandName        String             @unique
  iconName         String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  // Relations
  user             User               @relation(fields: [userId], references: [id])
  models           CarModel[]
  Product          Product[]
  ProductReference ProductReference[]

  @@map("car_brands")
}

model CarModel {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  brandId     String          @db.ObjectId
  modelName   String          @unique
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  // Relations
  generations CarGeneration[]
  brand       CarBrand        @relation(fields: [brandId], references: [id], onDelete: Cascade)

  @@unique([brandId, modelName]) // each brand can't have duplicate model names
  @@map("car_models")
}

model CarGeneration {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  modelId         String      @db.ObjectId
  generationName  String // e.g. "CR-V I (RD)"
  body            String? // e.g. "4WD"
  productionStart DateTime?
  productionEnd   DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  // Relations
  engines         CarEngine[]
  model           CarModel    @relation(fields: [modelId], references: [id], onDelete: Cascade)

  @@index([modelId])
  @@map("car_generations")
}

model CarEngine {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  generationId String   @db.ObjectId
  engineCode   String? // e.g. "RD1"
  kw           Int?
  hp           Int?
  ccm          Int?
  fuelType     String? // e.g. "Petrol", "Diesel"
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  generation CarGeneration    @relation(fields: [generationId], references: [id], onDelete: Cascade)
  fitments   ProductFitment[]

  @@unique([generationId, engineCode])
  @@index([generationId])
  @@map("car_engines")
}

model Product {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  sellerId      String   @db.ObjectId
  categoryId    String   @db.ObjectId
  brandId       String   @db.ObjectId
  productName   String
  productImages String[]
  description   String?
  price         Float
  discount      Float    @default(0)
  stock         Int
  isVisible     Boolean  @default(true)
  totalRating   Float    @default(0)
  avgRating     Float    @default(0)
  totalSold     Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  seller          SellerProfile      @relation(fields: [sellerId], references: [userId], onDelete: Cascade)
  category        Category           @relation(fields: [categoryId], references: [id])
  brand           CarBrand           @relation(fields: [brandId], references: [id])
  fitVehicles     ProductFitment[]
  sections        ProductSection[]
  references      ProductReference[]
  shippings       ProductShipping[]
  checkoutItem    CheckoutItem[]
  cartItem        CartItem[]
  favoriteProduct FavoriteProduct[]
  review          Review[]
  orderItem       OrderItem[]

  @@index([sellerId])
  @@index([categoryId])
  @@index([brandId])
  @@map("products")
}

model ProductFitment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  engineId  String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  engine  CarEngine @relation(fields: [engineId], references: [id], onDelete: Cascade)

  @@unique([productId, engineId]) // prevent duplicate mappings
  @@index([engineId])
  @@map("product_fitments")
}

model ProductSection {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  productId   String   @db.ObjectId
  sectionName String // e.g. "Measurements", "Fit Vehicles"
  parentId    String?  @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  product     Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  fields      ProductField[]
  subSections ProductSection[] @relation("SubSections")
  parent      ProductSection?  @relation("SubSections", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([productId])
  @@map("product_sections")
}

model ProductField {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  sectionId   String    @db.ObjectId
  fieldName   String // e.g. "Length", "Width", "OEM Ref No"
  valueString String?
  valueInt    Int?
  valueFloat  Float?
  valueDate   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  productSection ProductSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@index([sectionId])
  @@map("product_fields")
}

model ProductReference {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  productId String        @db.ObjectId
  brandId   String?       @db.ObjectId
  type      ReferenceType
  number    String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  product Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  brand   CarBrand? @relation(fields: [brandId], references: [id])

  @@unique([productId, type, number])
  @@index([productId])
  @@map("product_references")
}

model ProductShipping {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  productId   String   @db.ObjectId
  countryName String
  countryCode String
  carrier     String
  cost        Float
  deliveryMin Int
  deliveryMax Int
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, countryCode, carrier])
  @@index([productId])
  @@map("product_shippings")
}

model FavoriteProduct {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  productId String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId]) // prevent duplicate favorites
  @@map("favorite_products")
}

model Faq {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  question  String
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user User @relation(fields: [userId], references: [id])

  @@map("faqs")
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  title     String
  body      String
  data      String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user User @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model Payment {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  userId          String        @db.ObjectId
  paymentIntentId String?
  paymentMethodId String?
  paymentAmount   Float
  courseId        String        @db.ObjectId
  paymentDate     DateTime      @default(now())
  amountProvider  String
  invoiceId       String?
  status          PaymentStatus @default(PENDING)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  user       User      @relation(fields: [userId], references: [id])
  Checkout   Checkout? @relation(fields: [checkoutId], references: [id])
  checkoutId String?   @db.ObjectId
  Order      Order[]

  @@map("payments")
}

model Order {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  userId        String        @db.ObjectId
  paymentId     String?       @db.ObjectId
  // Shipping & Billing
  shippingId    String?       @db.ObjectId
  billingId     String?       @db.ObjectId
  totalAmount   Float
  status        OrderStatus   @default(PENDING)
  paymentStatus PaymentStatus @default(PENDING)
  transactionId String?
  notes         String?

  // Snapshot fields — to preserve address even if user later changes/deletes it
  shippingSnapshot Json?
  billingSnapshot  Json?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relationships
  shipping Address?    @relation("ShippingAddressRelation", fields: [shippingId], references: [id])
  billing  Address?    @relation("BillingAddressRelation", fields: [billingId], references: [id])
  payment  Payment?    @relation(fields: [paymentId], references: [id])
  user     User        @relation(fields: [userId], references: [id])
  items    OrderItem[]

  @@map("orders")
}

/// Each product purchased in an order
model OrderItem {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String @db.ObjectId
  productId String @db.ObjectId
  quantity  Int
  price     Float

  // Relationships
  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

/// Shipping / Billing address
model Address {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  userId      String  @db.ObjectId
  fullName    String
  phone       String
  email       String?
  addressLine String
  city        String
  state       String?
  postalCode  String?
  country     String

  user User @relation(fields: [userId], references: [id])

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  orderForShipping Order[]  @relation("ShippingAddressRelation")
  orderForBilling  Order[]  @relation("BillingAddressRelation")

  @@map("addresses")
}

model PrivacyPolicy {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  heading   String?
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user User @relation(fields: [userId], references: [id])

  @@map("privacy_policies")
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  productId String   @db.ObjectId
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("reviews")
}

model AboutUs {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  heading   String?
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user User @relation(fields: [userId], references: [id])

  @@map("about_us")
}

model ContactUsInfo {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  email       String
  phoneNumber String
  location    String?
  facebook    String?
  instagram   String?
  twitter     String?
  linkedin    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  user User @relation(fields: [userId], references: [id])

  @@map("contact_us_info")
}

model HelpAndSupport {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  heading   String?
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user User @relation(fields: [userId], references: [id])

  @@map("help_and_support")
}

model TermAndCondition {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  heading   String?
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user User @relation(fields: [userId], references: [id])

  @@map("terms_and_conditions")
}

model Support {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  userEmail String
  userPhone String?
  message   String
  status    SupportStatus @default(OPEN)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // Relationships

  reply Reply[]

  @@map("supports")
}

model Reply {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  userId    String      @db.ObjectId
  supportId String?     @db.ObjectId
  message   String
  status    ReplyStatus @default(CLOSED)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relationships
  support Support? @relation(fields: [supportId], references: [id])
  user    User     @relation(fields: [userId], references: [id])

  @@map("replies")
}

model Cart {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user  User       @relation(fields: [userId], references: [id])
  items CartItem[]

  @@map("carts")
}

model CartItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  cartId    String   @db.ObjectId
  productId String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  cart    Cart    @relation(fields: [cartId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([cartId, productId]) // no duplicate courses in same cart
  @@map("cart_items")
}

model Checkout {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  userId      String         @unique @db.ObjectId
  totalAmount Float
  status      CheckoutStatus @default(PENDING)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relationships
  user    User           @relation(fields: [userId], references: [id])
  items   CheckoutItem[]
  payment Payment[]

  @@map("checkouts")
}

model CheckoutItem {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  checkoutId String   @db.ObjectId
  productId  String   @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relationships
  checkout Checkout @relation(fields: [checkoutId], references: [id])
  product  Product  @relation(fields: [productId], references: [id])

  @@map("checkout_items")
}

model FoundingTeam {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  name      String
  role      String
  image     String?
  linkedin  String?
  twitter   String?
  instagram String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user User @relation(fields: [userId], references: [id])

  @@map("founding_team")
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

enum ReferenceType {
  OE
  SUPPLIER
  INTERNAL
}

enum CheckoutStatus {
  PENDING
  PAID
  FAILED
}

// New Enums
enum AttemptStatus {
  SUBMITTED // Just submitted, auto-grading done
  UNDER_REVIEW // Short answers need manual grading
  GRADED // Fully graded (auto + manual)
  PUBLISHED // Grades released to student
}

enum ResponseStatus {
  SUBMITTED // Response submitted
  AUTO_GRADED // MCQ/TrueFalse graded
  MANUAL_GRADED // Short answer graded by instructor
}

enum QuestionType {
  MCQ
  TRUE_FALSE
  SHORT_ANSWER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CASH
  EXPIRED
  REFUNDED
  REQUIRES_CAPTURE
  CANCELLED
}

enum PlatFormType {
  GOOGLE
  FACEBOOK
  APPLE
}

enum ReplyStatus {
  PENDING
  IGNORED
  RESOLVED
  CLOSED
}

enum ReplyType {
  SUPPORT
  REPORT
}

enum RoomType {
  ONE_TO_ONE
  GROUP
}

enum SupportStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum UserRoleEnum {
  ADMIN
  SUPER_ADMIN
  USER
  SELLER
  BUYER
}

enum UserStatus {
  ACTIVE
  PENDING
  BLOCKED
}
