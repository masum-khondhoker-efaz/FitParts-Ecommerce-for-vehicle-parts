generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                         String        @id @default(auto()) @map("_id") @db.ObjectId
  fullName                   String
  email                      String        @unique
  password                   String?
  status                     UserStatus    @default(PENDING)
  isVerified                 Boolean       @default(false)
  isProfileComplete          Boolean       @default(false)
  address                    String?
  isLoggedIn                 Boolean       @default(false)
  image                      String?
  phoneNumber                String?
  dateOfBirth                String?
  gender                     String?
  plateForm                  PlatFormType?
  fcmToken                   String?
  fcmTokenEx                 String?
  stripeCustomerId           String?
  isVerifiedForPasswordReset Boolean       @default(false)
  createdAt                  DateTime      @default(now())
  updatedAt                  DateTime      @updatedAt

  // Relationships
  roles            UserRole[]
  Review           Review[]
  Faq              Faq[]
  TermAndCondition TermAndCondition[]
  PrivacyPolicy    PrivacyPolicy[]
  Notification     Notification[]
  Payment          Payment[]
  Category         Category[]
  AboutUs          AboutUs[]
  HelpAndSupport   HelpAndSupport[]
  Support          Support[]
  Reply            Reply[]
  Cart             Cart[]
  Checkout         Checkout[]
  Admin            Admin?
  SellerProfile    SellerProfile?

  @@map("users")
}

model Role {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  name      UserRoleEnum @unique
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  // Relationships
  users UserRole[]

  @@map("roles")
}

model UserRole {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  roleId String @db.ObjectId

  user User @relation(fields: [userId], references: [id])
  role Role @relation(fields: [roleId], references: [id])

  @@unique([userId, roleId])
  @@map("user_roles")
}

model Admin {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  userId       String       @unique @db.ObjectId
  role         UserRoleEnum @default(SUPER_ADMIN)
  isSuperAdmin Boolean      @default(false)
  systemOwner  Boolean      @default(false)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  // Relationships
  user User @relation(fields: [userId], references: [id])

  @@map("admins")
}

model SellerProfile {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  userId               String   @unique @db.ObjectId
  companyName          String?
  logo                 String?
  contactInfo          String?
  address              String?
  payoutInfo           String?
  isSellerInfoComplete Boolean  @default(false)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relations
  user    User      @relation(fields: [userId], references: [id])
  Product Product[]

  @@map("seller_profiles")
}

model Category {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user   User     @relation(fields: [userId], references: [id])
  Product Product[]
  @@map("categories")
}

model Brand {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user   User     @relation(fields: [userId], references: [id])
  Product Product[]
  @@map("brands")
}

model Product {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  sellerId      String   @db.ObjectId
  productName   String
  productImages String[]
  description   String?
  price         Float
  discount      Float    @default(0) // percentage discount
  stock         Int
  isVisible     Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  seller           SellerProfile      @relation(fields: [sellerId], references: [userId])
  sections         ProductSection[]
  ProductShipping  ProductShipping[]
  ProductReference ProductReference[]

  @@map("products")
}

model ProductSection {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  name      String // e.g. "Measurements", "Fit Vehicles"
  parentId  String?  @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  product     Product          @relation(fields: [productId], references: [id])
  fields      ProductField[]
  subSections ProductSection[] @relation("SubSections")
  parent      ProductSection?  @relation("SubSections", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("product_sections")
}

model ProductField {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  sectionId   String    @db.ObjectId
  name        String // e.g. "Length", "Width", "OEM Ref No"
  valueString String? // store string value
  valueInt    Int? // store integer value
  valueFloat  Float? // store float value
  valueDate   DateTime? // store date value
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relation
  section ProductSection @relation(fields: [sectionId], references: [id])

  @@map("product_fields")
}

model ProductReference {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  productId String        @db.ObjectId
  type      ReferenceType // OE, SUPPLIER, INTERNAL, etc.
  number    String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // Relations
  product Product @relation(fields: [productId], references: [id])

  @@unique([productId, type, number]) // ensure uniqueness across catalog
  @@map("product_references")
}

model ProductShipping {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  productId   String   @db.ObjectId
  countryName String // e.g. "United States", "Australia"
  countryCode String // e.g. "US", "AU"
  carrier     String // e.g. "DHL", "FedEx"
  cost        Float // e.g. 5.0
  deliveryMin Int // min delivery days
  deliveryMax Int // max delivery days
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  product Product @relation(fields: [productId], references: [id])

  @@unique([productId, countryCode, carrier]) // avoid duplicates
  @@map("product_shipping")
}

model Category {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user User @relation(fields: [userId], references: [id])

  @@map("categories")
}

model Faq {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  question  String
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user User @relation(fields: [userId], references: [id])

  @@map("faqs")
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  title     String
  body      String
  data      String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user User @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model Payment {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  userId          String        @db.ObjectId
  paymentIntentId String?
  paymentMethodId String?
  paymentAmount   Float
  courseId        String        @db.ObjectId
  paymentDate     DateTime      @default(now())
  amountProvider  String
  invoiceId       String?
  status          PaymentStatus @default(PENDING)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("payments")
}

model PrivacyPolicy {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  heading   String?
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user User @relation(fields: [userId], references: [id])

  @@map("privacy_policies")
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  courseId  String   @db.ObjectId
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user User @relation(fields: [userId], references: [id])

  @@map("reviews")
}

model AboutUs {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  heading   String?
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user User @relation(fields: [userId], references: [id])

  @@map("about_us")
}

model HelpAndSupport {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  heading   String?
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user User @relation(fields: [userId], references: [id])

  @@map("help_and_support")
}

model TermAndCondition {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  heading   String?
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user User @relation(fields: [userId], references: [id])

  @@map("terms_and_conditions")
}

model Support {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  userId    String        @db.ObjectId
  userEmail String
  userPhone String?
  message   String
  status    SupportStatus @default(OPEN)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // Relationships
  user User @relation(fields: [userId], references: [id])

  Reply Reply[]

  @@map("supports")
}

model Reply {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  userId    String      @db.ObjectId
  supportId String?     @db.ObjectId
  message   String
  status    ReplyStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relationships
  support Support? @relation(fields: [supportId], references: [id])
  user    User     @relation(fields: [userId], references: [id])

  @@map("replies")
}

model Cart {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String?  @db.ObjectId // for individual
  companyId String?  @db.ObjectId // for company
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user     User?      @relation(fields: [userId], references: [id])
  items    CartItem[]
  Checkout Checkout[]

  @@map("carts")
}

model CartItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  cartId    String   @db.ObjectId
  courseId  String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  cart Cart @relation(fields: [cartId], references: [id])

  @@unique([cartId, courseId]) // no duplicate courses in same cart
  @@map("cart_items")
}

model Checkout {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  cartId      String         @db.ObjectId
  userId      String?        @db.ObjectId // individual
  companyId   String?        @db.ObjectId // company
  totalAmount Float
  status      CheckoutStatus @default(PENDING)
  paymentId   String? // from Stripe/other gateway
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relationships
  cart Cart  @relation(fields: [cartId], references: [id])
  user User? @relation(fields: [userId], references: [id])

  @@map("checkouts")
}

enum ReferenceType {
  OE
  SUPPLIER
  INTERNAL
}

enum CheckoutStatus {
  PENDING
  PAID
  FAILED
}

// New Enums
enum AttemptStatus {
  SUBMITTED // Just submitted, auto-grading done
  UNDER_REVIEW // Short answers need manual grading
  GRADED // Fully graded (auto + manual)
  PUBLISHED // Grades released to student
}

enum ResponseStatus {
  SUBMITTED // Response submitted
  AUTO_GRADED // MCQ/TrueFalse graded
  MANUAL_GRADED // Short answer graded by instructor
}

enum QuestionType {
  MCQ
  TRUE_FALSE
  SHORT_ANSWER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CASH
  EXPIRED
  REFUNDED
  REQUIRES_CAPTURE
  CANCELLED
}

enum PlatFormType {
  GOOGLE
  FACEBOOK
  APPLE
}

enum ReplyStatus {
  PENDING
  IGNORED
  RESOLVED
  CLOSED
}

enum ReplyType {
  SUPPORT
  REPORT
}

enum RoomType {
  ONE_TO_ONE
  GROUP
}

enum SupportStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum UserRoleEnum {
  ADMIN
  SUPER_ADMIN
  USER
  SELLER
  BUYER
}

enum UserStatus {
  ACTIVE
  PENDING
  BLOCKED
}
